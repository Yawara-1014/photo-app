<div class="container">
<div class="box form">
<h2>投稿フォーム</h2>


<% if @post.errors.any? %>
<div id="error_explanation">
  <div class="alert alert-danger">
      <%= @post.errors.count %>
  </div>
  <ul class="post-error">
  <% @post.errors.full_messages.each do |msg| %>
    <li><%= msg %></li>
  <% end %>
</div>
<% end %>

<div class="map-serch">
  <form onsubmit="return false;">
    <input type="text" id="address" class="map-serch__input" placeholder="場所を検索するか、地図をクリックしてください。">
    <button type="hidden" id="map_button"></button>
  </form>
</div>


<%= form_for(@post, class: "form") do |f| %>
  <%= f.text_field :title, placeholder: "タイトル" %>
  <%= f.text_field :tag_list, value: @post.tag_list, class: "form-control", placeholder: "タグ（カンマ区切り）" %>
  <%= f.text_field :latitude, placeholder: "軽度", id: "lat", type: "hidden" %>
  <%= f.text_field :longitude, placeholder: "緯度", id: "lng", type:"hidden" %>
  
  <div id="map-camvas" style='width: 100%; height: 500px;'></div>
  
  <div class="file-picture-con" id="drag-drop-area">
    <p class="drag-drop-info">ここに画像ファイルをドロップ</p>
  </div>
  <p class="tac">または</p>
  <div class="tac mt1">
    <label for="file-picture" class="file-picture__label">
      写真を選択
      <%= f.file_field :pictures, class: "file-picture", id: "file-picture", multiple: true %>
    </label>
  </div>
  <div id="preview" class="preview">
    <p class="tac" id="preview-title">プレビュー</p>
    <div id="preview-inner">
    </div>
  </div>
  <div class="actions">
    <%= f.submit "投稿", class: "btn btn-primary" %>
  </div>
<% end %>

</div>
</div>


  <script>
  'use stript';
  {
    const fileArea = document.getElementById('drag-drop-area');
    const fileInput = document.getElementById('file-picture');
    const preview = document.getElementById('preview');
    const previewInner = document.getElementById("preview-inner")

    fileArea.addEventListener('dragover', function(evt){
      evt.preventDefault();
      fileArea.classList.add('dragover');
    });
    fileArea.addEventListener('dragleave', function(evt){
        evt.preventDefault();
        fileArea.classList.remove('dragover');
    });
    // droした時
    fileArea.addEventListener('drop', function(evt){
        evt.preventDefault();
        fileArea.classList.remove('dragenter');
        preview.classList.add('preview__on');
        if (document.getElementById('previewPicture') != null) {
          while (previewInner.firstChild) {
            previewInner.removeChild(previewInner.firstChild);
          }
        }
        var files = evt.dataTransfer.files;
        fileInput.files = files;
        filePreview(files);
        console.log(fileInput.files[0]);
    });
    // 写真を選択からinputした場合
    fileInput.addEventListener('change', function(evt) {
        if (document.getElementById('previewPicture') != null) {
          while (previewInner.firstChild) {
            previewInner.removeChild(previewInner.firstChild);
          }
        }
      const files = fileInput.files;
      filePreview(files);
    });
    // fileをプレビューする関数
    function filePreview(files) {
      preview.classList.add('preview__on')
      for (let i = 0; i < files.length; i ++ ) {
        var imageFile = files[i];
        var blobUrl = window.URL.createObjectURL(imageFile);
        console.log(blobUrl)
        var img = document.createElement("img");
        img.setAttribute("src", blobUrl);
        img.setAttribute("class", "preview-picture");
        img.setAttribute("id", "previewPicture");
        previewInner.appendChild(img);
      }
    }


  var mapOptions = {
      zoom: 11,
      mapTypeId: google.maps.MapTypeId.ROADMAP,
      center: {lat: 35.6587096, lng: 139.7452492}
    };

var map = new google.maps.Map(document.getElementById("map-camvas"), mapOptions);




var getMap = (function() {
  function codeAddress(address) {
    // google.maps.Geocoder()コンストラクタのインスタンスを生成
    var geocoder = new google.maps.Geocoder();

        // 地図表示に関するオプション
    var mapOptions = {
      zoom: 11,
      mapTypeId: google.maps.MapTypeId.ROADMAP,
      center: {lat: 35.6587096, lng: 139.7452492},
      mapTypeControl: false,
      fullscreenControl: false, //全画面表示コントロール
      streetViewControl: false, //ストリートビュー コントロール
      zoomControl: true, //ズーム コントロール
    };
 
    // 地図を表示させるインスタンスを生成
    var map = new google.maps.Map(document.getElementById("map-camvas"), mapOptions);
     
    //マーカー変数用意
    var marker;
     
    // geocoder.geocode()メソッドを実行 
    geocoder.geocode( { 'address': address}, function(results, status) {
       
      // ジオコーディングが成功した場合
      if (status == google.maps.GeocoderStatus.OK) {
        // 変換した緯度・経度情報を地図の中心に表示
        map.setCenter(results[0].geometry.location);
        //☆表示している地図上の緯度経度
        document.getElementById('lat').value=results[0].geometry.location.lat();
        document.getElementById('lng').value=results[0].geometry.location.lng();
        // マーカー設定
        marker = new google.maps.Marker({
          map: map,
          position: results[0].geometry.location
        });
       
      // ジオコーディングが成功しなかった場合
      } else {
        console.log('Geocode was not successful for the following reason: ' + status);
      }
     
    });
    // マップをクリックで位置変更
    map.addListener('click', function(e) {
      getClickLatLng(e.latLng, map);
    });
    function getClickLatLng(lat_lng, map) {
      //☆表示している地図上の緯度経度
      document.getElementById('lat').value=lat_lng.lat();
      document.getElementById('lng').value=lat_lng.lng();
      // マーカーを設置
      console.log(marker)
      if (marker) {
        marker.setMap(null);
      }
      
      marker = new google.maps.Marker({
        position: lat_lng,
        map: map
      });
      // 座標の中心をずらす
      map.panTo(lat_lng);
    }
  }

  //inputのvalueで検索して地図を表示
  return {
    getAddress: function() {
      // ボタンに指定したid要素を取得
      var button = document.getElementById("map_button");
      // ボタンが押された時の処理
      button.onclick = function() {
        // フォームに入力された住所情報を取得
        var address = document.getElementById("address").value;
        // 取得した住所を引数に指定してcodeAddress()関数を実行
        codeAddress(address);
      }
      //読み込まれたときに地図を表示
      window.onload = function(){
        // フォームに入力された住所情報を取得
        var address = document.getElementById("address").value;
        // 取得した住所を引数に指定してcodeAddress()関数を実行
        codeAddress(address);
      }
    }
  };
})();
getMap.getAddress();
  }
</script>
  </script>
