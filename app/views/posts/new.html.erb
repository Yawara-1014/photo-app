<div class="container">
<div class="box form">
<h2>投稿フォーム</h2>


<% if @post.errors.any? %>
<div id="error_explanation">
  <div class="alert alert-danger">
     The form contains <%=  pluralize(@post.errors.count, "error")%>
  </div>
  <ul class="post-error">
  <% @post.errors.full_messages.each do |msg| %>
    <li><%= msg %></li>
  <% end %>
</div>


<% end %>

<%= form_for(@post, class: "form") do |f| %>
  <%= f.text_field :title, placeholder: "タイトル" %>
  <%= f.text_field :tag_list, value: @post.tag_list, class: "form-control", placeholder: "タグ（カンマ区切り）" %>
  <div class="file-picture-con" id="drag-drop-area">
  <p class="drag-drop-info">ここにファイルをドロップ</p>
    
  </div>
  <p class="tac">または</p>
  <div class="tac mt1">
    <label for="file-picture" class="file-picture__label">
      写真を選択
      <%= f.file_field :pictures, class: "file-picture", id: "file-picture", multiple: true %>
    </label>
  </div>
  <div id="preview" class="preview">
    <p class="tac" id="preview-title">プレビュー</p>
    <div id="preview-inner">
    </div>
  </div>
  <div class="actions">
    <%= f.submit "投稿", class: "btn btn-primary" %>
  </div>
<% end %>

</div>
</div>


  <script>
  'user stript';
  {
    const fileArea = document.getElementById('drag-drop-area');
    const fileInput = document.getElementById('file-picture');
    const preview = document.getElementById('preview');
    const previewInner = document.getElementById("preview-inner")

    fileArea.addEventListener('dragover', function(evt){
      evt.preventDefault();
      fileArea.classList.add('dragover');
    });
    fileArea.addEventListener('dragleave', function(evt){
        evt.preventDefault();
        fileArea.classList.remove('dragover');
    });
    // droした時
    fileArea.addEventListener('drop', function(evt){
        evt.preventDefault();
        fileArea.classList.remove('dragenter');
        preview.classList.add('preview__on');
        if (document.getElementById('previewPicture') != null) {
          while (previewInner.firstChild) {
            previewInner.removeChild(previewInner.firstChild);
          }
        }
        var files = evt.dataTransfer.files;
        fileInput.files = files;
        filePreview(files);
        console.log(fileInput.files[0]);
    });
    // 写真を選択からinputした場合
    fileInput.addEventListener('change', function(evt) {
        if (document.getElementById('previewPicture') != null) {
          while (previewInner.firstChild) {
            previewInner.removeChild(previewInner.firstChild);
          }
        }
      const files = fileInput.files;
      filePreview(files);
    });
    // fileをプレビューする関数
    function filePreview(files) {
      // fileをプレビュー
      preview.classList.add('preview__on')
      for (let i = 0; i < files.length; i ++ ) {
        var imageFile = files[i];
        var blobUrl = window.URL.createObjectURL(imageFile);
        console.log(blobUrl)
        var img = document.createElement("img");
        img.setAttribute("src", blobUrl);
        img.setAttribute("class", "preview-picture");
        img.setAttribute("id", "previewPicture");
        previewInner.appendChild(img);
      }
    }
    //  ファイルを削除するイベント
    function fileRemove(fileNum) {

    }
  }
  </script>
