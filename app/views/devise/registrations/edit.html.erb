<div class="container">
<div class="box form">
<h2>ユーザー情報編集</h2>
<%= form_for(resource, as: resource_name, url: registration_path(resource_name), html: { method: :put }) do |f| %>
  <%= render "devise/shared/error_messages", resource: resource %>
  <div class="tac">
      <%= image_tag @user.profile_image.url, class: "profile-image", id: "profile-image", size: "150" %>
      <div id="profilePreviewInner"></div>
  </div>
  <div class="field field-profile-image">
    <label for="inputProfile" class="file-profile-image__label">
      変更
    <%= f.file_field :profile_image, class: "file-profile-image", id: "inputProfile" %>
  </label>
  </div>
  <div class="field">
    <%= f.text_field :name, autofocus: true, placeholder: "ユーザー名*" %>
  </div>

  <div class="field">
    <%= f.email_field :email, autofocus: true, autocomplete: "email", placeholder: "メールアドレス*" %>
  </div>

  <div class="field">
    <%= f.password_field :password, autocomplete: "new-password", placeholder: "新しいパスワード（変更する場合）" %>
  </div>

  <div class="field">
    <%= f.password_field :password_confirmation, autocomplete: "new-password", placeholder: "新しいパスワード（確認）" %>
  </div>

  <div class="field">
    <%= f.password_field :current_password, autocomplete: "current-password", placeholder: "現在のパスワード*" %>
  </div>
  
  <div class="field">
    <%= f.text_area :profile, autofocus: true, placeholder: "プロフィール(100字)" %>
  </div>

  <div class="actions">
    <%= f.submit "Update" %>
  </div>
<% end %>

<p class="tac"><%= button_to "アカウントを削除する", registration_path(resource_name), data: { confirm: "本当に削除しますか？" }, method: :delete, class: "account-delete-btn" %></p>
<%= link_to "戻る", :back %>
</div>
</div>

<script>
'use stript'; {
  const fileInput = document.getElementById('inputProfile');
  const previewInner = document.getElementById('profilePreviewInner')
  // プロフィール画像を選択したら、画像が変わる
  fileInput.addEventListener('change', function (evt) {
    document.getElementById("profile-image").style.display="none";
    if (document.getElementById('profilePreviewPicture') != null) {
      while (previewInner.firstChild) {
        previewInner.removeChild(previewInner.firstChild);
      }
    }
    const file = fileInput.files[0];
    console.log(file)
    var blobUrl = window.URL.createObjectURL(file);
    console.log(blobUrl)
    var img = document.createElement("img");
    img.setAttribute("src", blobUrl);
    img.setAttribute("class", "profile-preview-picture");
    img.setAttribute("id", "profilePreviewPicture");
    previewInner.appendChild(img);
  });
}

</script>